import _extends from "@babel/runtime/helpers/esm/extends";
import _objectWithoutProperties from "@babel/runtime/helpers/esm/objectWithoutProperties";
import _JSXStyle from "styled-jsx/style";
import React, { useMemo } from 'react';
import withDefaults from '../utils/with-defaults';
import useTheme from '../use-theme';
import { useSelectContext } from './select-context';
import useWarning from '../utils/use-warning';
import Ellipsis from '../shared/ellipsis';
var defaultProps = {
  disabled: false,
  divider: false,
  label: false,
  className: '',
  preventAllEvents: false
};

var SelectOption = function SelectOption(_ref) {
  var identValue = _ref.value,
      className = _ref.className,
      children = _ref.children,
      disabled = _ref.disabled,
      divider = _ref.divider,
      label = _ref.label,
      preventAllEvents = _ref.preventAllEvents,
      props = _objectWithoutProperties(_ref, ["value", "className", "children", "disabled", "divider", "label", "preventAllEvents"]);

  var theme = useTheme();

  var _useSelectContext = useSelectContext(),
      updateValue = _useSelectContext.updateValue,
      value = _useSelectContext.value,
      disableAll = _useSelectContext.disableAll;

  var isDisabled = useMemo(function () {
    return disabled || disableAll;
  }, [disabled, disableAll]);
  var isLabel = useMemo(function () {
    return label || divider;
  }, [label, divider]);

  if (!isLabel && identValue === undefined) {
    useWarning('The props "value" is required.', 'Select Option');
  }

  var selected = useMemo(function () {
    if (!value) return false;

    if (typeof value === 'string') {
      return identValue === value;
    }

    return value.includes("".concat(identValue));
  }, [identValue, value]);
  var bgColor = useMemo(function () {
    if (isDisabled) return theme.palette.accents_1;
    return selected ? theme.palette.accents_2 : theme.palette.background;
  }, [selected, isDisabled, theme.palette]);
  var hoverBgColor = useMemo(function () {
    if (isDisabled || isLabel || selected) return bgColor;
    return theme.palette.accents_1;
  }, [selected, isDisabled, theme.palette, isLabel, bgColor]);
  var color = useMemo(function () {
    if (isDisabled) return theme.palette.accents_4;
    return selected ? theme.palette.foreground : theme.palette.accents_5;
  }, [selected, isDisabled, theme.palette]);

  var clickHandler = function clickHandler(event) {
    if (preventAllEvents) return;
    event.stopPropagation();
    event.nativeEvent.stopImmediatePropagation();
    event.preventDefault();
    if (isDisabled || isLabel) return;
    updateValue && updateValue(identValue);
  };

  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement("div", _extends({
    onClick: clickHandler
  }, props, {
    className: _JSXStyle.dynamic([["3051474735", [theme.layout.gap, theme.layout.gapHalf, bgColor, color, isDisabled ? 'not-allowed' : 'pointer', hoverBgColor, theme.palette.accents_7, theme.palette.border, theme.palette.accents_7, theme.palette.border]]]) + " " + (props && props.className != null && props.className || "option ".concat(divider ? 'divider' : '', " ").concat(label ? 'label' : '', " ").concat(className))
  }), /*#__PURE__*/React.createElement(Ellipsis, {
    height: "calc(1.688 * ".concat(theme.layout.gap, ")")
  }, children)), /*#__PURE__*/React.createElement(_JSXStyle, {
    id: "3051474735",
    dynamic: [theme.layout.gap, theme.layout.gapHalf, bgColor, color, isDisabled ? 'not-allowed' : 'pointer', hoverBgColor, theme.palette.accents_7, theme.palette.border, theme.palette.accents_7, theme.palette.border]
  }, ".option.__jsx-style-dynamic-selector{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;max-width:100%;-webkit-box-pack:start;-webkit-justify-content:flex-start;-ms-flex-pack:start;justify-content:flex-start;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;font-weight:normal;font-size:0.75rem;height:calc(1.688 * ".concat(theme.layout.gap, ");padding:0 ").concat(theme.layout.gapHalf, ";background-color:").concat(bgColor, ";color:").concat(color, ";-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;border:0;cursor:").concat(isDisabled ? 'not-allowed' : 'pointer', ";-webkit-transition:background 0.2s ease 0s,border-color 0.2s ease 0s;transition:background 0.2s ease 0s,border-color 0.2s ease 0s;}.option.__jsx-style-dynamic-selector:hover{background-color:").concat(hoverBgColor, ";color:").concat(theme.palette.accents_7, ";}.divider.__jsx-style-dynamic-selector{line-height:0;height:0;padding:0;overflow:hidden;border-top:1px solid ").concat(theme.palette.border, ";margin:0.5rem 0;width:100%;}.label.__jsx-style-dynamic-selector{font-size:0.875rem;color:").concat(theme.palette.accents_7, ";border-bottom:1px solid ").concat(theme.palette.border, ";text-transform:capitalize;cursor:default;}")));
};

export default withDefaults(SelectOption, defaultProps);