import _extends from "@babel/runtime/helpers/esm/extends";
import _objectWithoutProperties from "@babel/runtime/helpers/esm/objectWithoutProperties";
import _JSXStyle from "styled-jsx/style";
import React, { useImperativeHandle, useMemo, useRef } from 'react';
import useTheme from '../use-theme';
import { useModalContext } from './modal-context';
import Button from '../button/button';
var defaultProps = {
  className: '',
  passive: false,
  disabled: false
};
var ModalAction = /*#__PURE__*/React.forwardRef(function (_ref, ref) {
  var className = _ref.className,
      children = _ref.children,
      onClick = _ref.onClick,
      passive = _ref.passive,
      disabled = _ref.disabled,
      props = _objectWithoutProperties(_ref, ["className", "children", "onClick", "passive", "disabled"]);

  var theme = useTheme();
  var btnRef = useRef(null);

  var _useModalContext = useModalContext(),
      _close = _useModalContext.close;

  useImperativeHandle(ref, function () {
    return btnRef.current;
  });

  var clickHandler = function clickHandler(event) {
    if (disabled) return;
    var actionEvent = Object.assign({}, event, {
      close: function close() {
        return _close && _close();
      }
    });
    onClick && onClick(actionEvent);
  };

  var color = useMemo(function () {
    return passive ? theme.palette.accents_5 : theme.palette.foreground;
  }, [theme.palette, passive, disabled]);
  var bgColor = useMemo(function () {
    return disabled ? theme.palette.accents_1 : theme.palette.background;
  }, [theme.palette, disabled]);
  var _styles$className = {
    styles: /*#__PURE__*/React.createElement(_JSXStyle, {
      id: "1656514662",
      dynamic: [color, theme.palette.background, disabled ? color : theme.palette.foreground, disabled ? bgColor : theme.palette.accents_1]
    }, "button.btn.__jsx-style-dynamic-selector{font-size:0.75rem;border:none;color:".concat(color, ";background-color:").concat(theme.palette.background, ";display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-box-align:center;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:center;-webkit-box-pack:center;-webkit-justify-content:center;-ms-flex-pack:center;justify-content:center;-webkit-flex:1;-ms-flex:1;flex:1;height:100%;border-radius:0;min-width:0;}button.btn.__jsx-style-dynamic-selector:hover,button.btn.__jsx-style-dynamic-selector:focus{color:").concat(disabled ? color : theme.palette.foreground, ";background-color:").concat(disabled ? bgColor : theme.palette.accents_1, ";}")),
    className: _JSXStyle.dynamic([["1656514662", [color, theme.palette.background, disabled ? color : theme.palette.foreground, disabled ? bgColor : theme.palette.accents_1]]])
  },
      resolveClassName = _styles$className.className,
      styles = _styles$className.styles;

  var overrideProps = _extends({}, props, {
    effect: false,
    ref: btnRef
  });

  return /*#__PURE__*/React.createElement(Button, _extends({
    className: "".concat(resolveClassName, " ").concat(className),
    onClick: clickHandler,
    disabled: disabled
  }, overrideProps), children, styles);
});
ModalAction.defaultProps = defaultProps;
export default ModalAction;