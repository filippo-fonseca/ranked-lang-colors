{"version":3,"file":"useReactiveVar.js","sourceRoot":"","sources":["../../../src/react/hooks/useReactiveVar.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,QAAQ,EAAE,SAAS,EAAE,MAAM,OAAO,CAAC;AAG5C,MAAM,UAAU,cAAc,CAAI,EAAkB;IAClD,IAAM,KAAK,GAAG,EAAE,EAAE,CAAC;IAGnB,IAAM,IAAI,GAAG,EAAE,CAAC,YAAY,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IAKjD,SAAS,CAAC,cAAM,OAAA,IAAI,EAAJ,CAAI,EAAE,EAAE,CAAC,CAAC;IAC1B,OAAO,KAAK,CAAC;AACf,CAAC","sourcesContent":["import { useState, useEffect } from 'react';\nimport { ReactiveVar } from '../../core';\n\nexport function useReactiveVar<T>(rv: ReactiveVar<T>): T {\n  const value = rv();\n  // We don't actually care what useState thinks the value of the variable\n  // is, so we take only the update function from the returned array.\n  const mute = rv.onNextChange(useState(value)[1]);\n  // Once the component is unmounted, ignore future updates. Note that the\n  // useEffect function returns the mute function without calling it,\n  // allowing it to be called when the component unmounts. This is\n  // equivalent to useEffect(() => () => mute(), []), but shorter.\n  useEffect(() => mute, []);\n  return value;\n}\n"]}