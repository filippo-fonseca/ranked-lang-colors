{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\n\nvar hexToRgb = function hexToRgb(color) {\n  var fullReg = /^#?([a-f\\d])([a-f\\d])([a-f\\d])$/i;\n  var full = color.replace(fullReg, function (_, r, g, b) {\n    return \"\".concat(r).concat(r).concat(g).concat(g).concat(b).concat(b);\n  });\n  var values = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(full);\n\n  if (!values) {\n    throw new Error(\"Geist UI: Unsupported \".concat(color, \" color.\"));\n  }\n\n  return [Number.parseInt(values[1], 16), Number.parseInt(values[2], 16), Number.parseInt(values[3], 16)];\n};\n\nexport var colorToRgbValues = function colorToRgbValues(color) {\n  if (color.charAt(0) === '#') return hexToRgb(color);\n  var safeColor = color.replace(/ /g, '');\n  var colorType = color.substr(0, 4);\n  var regArray = safeColor.match(/\\((.+)\\)/);\n\n  if (!colorType.startsWith('rgb') || !regArray) {\n    console.log(color);\n    throw new Error(\"Geist UI: Only support [\\\"RGB\\\", \\\"RGBA\\\", \\\"HEX\\\"] color.\");\n  }\n\n  return regArray[1].split(',').map(function (str) {\n    return Number.parseFloat(str);\n  });\n};\nexport var addColorAlpha = function addColorAlpha(color, alpha) {\n  if (!/^#|rgb|RGB/.test(color)) return color;\n\n  var _colorToRgbValues = colorToRgbValues(color),\n      _colorToRgbValues2 = _slicedToArray(_colorToRgbValues, 3),\n      r = _colorToRgbValues2[0],\n      g = _colorToRgbValues2[1],\n      b = _colorToRgbValues2[2];\n\n  var safeAlpha = alpha > 1 ? 1 : alpha < 0 ? 0 : alpha;\n  return \"rgba(\".concat(r, \", \").concat(g, \", \").concat(b, \", \").concat(safeAlpha, \")\");\n};","map":{"version":3,"sources":["/Users/filippofonseca/Developer/open-source/ranked-lang-colors/core-l/node_modules/@geist-ui/react/esm/utils/color.js"],"names":["_slicedToArray","hexToRgb","color","fullReg","full","replace","_","r","g","b","concat","values","exec","Error","Number","parseInt","colorToRgbValues","charAt","safeColor","colorType","substr","regArray","match","startsWith","console","log","split","map","str","parseFloat","addColorAlpha","alpha","test","_colorToRgbValues","_colorToRgbValues2","safeAlpha"],"mappings":"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","sourcesContent":["import _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\n\nvar hexToRgb = function hexToRgb(color) {\n  var fullReg = /^#?([a-f\\d])([a-f\\d])([a-f\\d])$/i;\n  var full = color.replace(fullReg, function (_, r, g, b) {\n    return \"\".concat(r).concat(r).concat(g).concat(g).concat(b).concat(b);\n  });\n  var values = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(full);\n\n  if (!values) {\n    throw new Error(\"Geist UI: Unsupported \".concat(color, \" color.\"));\n  }\n\n  return [Number.parseInt(values[1], 16), Number.parseInt(values[2], 16), Number.parseInt(values[3], 16)];\n};\n\nexport var colorToRgbValues = function colorToRgbValues(color) {\n  if (color.charAt(0) === '#') return hexToRgb(color);\n  var safeColor = color.replace(/ /g, '');\n  var colorType = color.substr(0, 4);\n  var regArray = safeColor.match(/\\((.+)\\)/);\n\n  if (!colorType.startsWith('rgb') || !regArray) {\n    console.log(color);\n    throw new Error(\"Geist UI: Only support [\\\"RGB\\\", \\\"RGBA\\\", \\\"HEX\\\"] color.\");\n  }\n\n  return regArray[1].split(',').map(function (str) {\n    return Number.parseFloat(str);\n  });\n};\nexport var addColorAlpha = function addColorAlpha(color, alpha) {\n  if (!/^#|rgb|RGB/.test(color)) return color;\n\n  var _colorToRgbValues = colorToRgbValues(color),\n      _colorToRgbValues2 = _slicedToArray(_colorToRgbValues, 3),\n      r = _colorToRgbValues2[0],\n      g = _colorToRgbValues2[1],\n      b = _colorToRgbValues2[2];\n\n  var safeAlpha = alpha > 1 ? 1 : alpha < 0 ? 0 : alpha;\n  return \"rgba(\".concat(r, \", \").concat(g, \", \").concat(b, \", \").concat(safeAlpha, \")\");\n};"]},"metadata":{},"sourceType":"module"}