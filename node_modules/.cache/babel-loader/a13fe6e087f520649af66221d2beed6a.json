{"ast":null,"code":"import { useState, useEffect } from 'react';\nexport function useReactiveVar(rv) {\n  var value = rv();\n  var mute = rv.onNextChange(useState(value)[1]);\n  useEffect(function () {\n    return mute;\n  }, []);\n  return value;\n}","map":{"version":3,"sources":["../../../src/react/hooks/useReactiveVar.ts"],"names":[],"mappings":"AAAA,SAAS,QAAT,EAAmB,SAAnB,QAAoC,OAApC;AAGA,OAAM,SAAU,cAAV,CAA4B,EAA5B,EAA8C;AAClD,MAAM,KAAK,GAAG,EAAE,EAAhB;AAGA,MAAM,IAAI,GAAG,EAAE,CAAC,YAAH,CAAgB,QAAQ,CAAC,KAAD,CAAR,CAAgB,CAAhB,CAAhB,CAAb;AAKA,EAAA,SAAS,CAAC,YAAA;AAAM,WAAA,IAAA;AAAI,GAAX,EAAa,EAAb,CAAT;AACA,SAAO,KAAP;AACD","sourcesContent":["import { useState, useEffect } from 'react';\nimport { ReactiveVar } from '../../core';\n\nexport function useReactiveVar<T>(rv: ReactiveVar<T>): T {\n  const value = rv();\n  // We don't actually care what useState thinks the value of the variable\n  // is, so we take only the update function from the returned array.\n  const mute = rv.onNextChange(useState(value)[1]);\n  // Once the component is unmounted, ignore future updates. Note that the\n  // useEffect function returns the mute function without calling it,\n  // allowing it to be called when the component unmounts. This is\n  // equivalent to useEffect(() => () => mute(), []), but shorter.\n  useEffect(() => mute, []);\n  return value;\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}