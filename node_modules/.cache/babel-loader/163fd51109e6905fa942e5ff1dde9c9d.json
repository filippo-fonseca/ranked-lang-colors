{"ast":null,"code":"import { Slot } from \"@wry/context\";\nimport { dep } from \"optimism\";\nvar varDep = dep();\nexport var cacheSlot = new Slot();\n\nfunction consumeAndIterate(set, callback) {\n  if (set.size) {\n    var items_1 = [];\n    set.forEach(function (item) {\n      return items_1.push(item);\n    });\n    set.clear();\n    items_1.forEach(callback);\n  }\n}\n\nvar varsByCache = new WeakMap();\nexport function forgetCache(cache) {\n  var vars = varsByCache.get(cache);\n\n  if (vars) {\n    consumeAndIterate(vars, function (rv) {\n      return rv.forgetCache(cache);\n    });\n    varsByCache.delete(cache);\n  }\n}\nexport function makeVar(value) {\n  var caches = new Set();\n  var listeners = new Set();\n\n  var rv = function (newValue) {\n    if (arguments.length > 0) {\n      if (value !== newValue) {\n        value = newValue;\n        varDep.dirty(rv);\n        caches.forEach(broadcast);\n        consumeAndIterate(listeners, function (listener) {\n          return listener(value);\n        });\n      }\n    } else {\n      var cache = cacheSlot.getValue();\n      if (cache) attach(cache);\n      varDep(rv);\n    }\n\n    return value;\n  };\n\n  rv.onNextChange = function (listener) {\n    listeners.add(listener);\n    return function () {\n      listeners.delete(listener);\n    };\n  };\n\n  var attach = rv.attachCache = function (cache) {\n    caches.add(cache);\n    var vars = varsByCache.get(cache);\n    if (!vars) varsByCache.set(cache, vars = new Set());\n    vars.add(rv);\n    return rv;\n  };\n\n  rv.forgetCache = function (cache) {\n    var deleted = caches.delete(cache);\n\n    if (deleted) {\n      var vars = varsByCache.get(cache);\n      if (vars) vars.delete(rv);\n    }\n\n    return deleted;\n  };\n\n  return rv;\n}\n\nfunction broadcast(cache) {\n  if (cache.broadcastWatches) {\n    cache.broadcastWatches();\n  }\n}","map":{"version":3,"sources":["../../../src/cache/inmemory/reactiveVars.ts"],"names":[],"mappings":"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","sourcesContent":["import { Slot } from \"@wry/context\";\nimport { dep } from \"optimism\";\nimport { InMemoryCache } from \"./inMemoryCache\";\nimport { ApolloCache } from '../../core';\n\nexport interface ReactiveVar<T> {\n  (newValue?: T): T;\n  onNextChange(listener: ReactiveListener<T>): () => void;\n  attachCache(cache: ApolloCache<any>): this;\n  forgetCache(cache: ApolloCache<any>): boolean;\n}\n\nexport type ReactiveListener<T> = (value: T) => any;\n\nconst varDep = dep<ReactiveVar<any>>();\n\n// Contextual Slot that acquires its value when custom read functions are\n// called in Policies#readField.\nexport const cacheSlot = new Slot<ApolloCache<any>>();\n\n// A listener function could in theory cause another listener to be added\n// to the set while we're iterating over it, so it's important to commit\n// to the original elements of the set before we begin iterating. See\n// iterateObserversSafely for another example of this pattern.\nfunction consumeAndIterate<T>(set: Set<T>, callback: (item: T) => any) {\n  if (set.size) {\n    const items: T[] = [];\n    set.forEach(item => items.push(item));\n    set.clear();\n    items.forEach(callback);\n  }\n}\n\nconst varsByCache = new WeakMap<ApolloCache<any>, Set<ReactiveVar<any>>>();\n\nexport function forgetCache(cache: ApolloCache<any>) {\n  const vars = varsByCache.get(cache);\n  if (vars) {\n    consumeAndIterate(vars, rv => rv.forgetCache(cache));\n    varsByCache.delete(cache);\n  }\n}\n\nexport function makeVar<T>(value: T): ReactiveVar<T> {\n  const caches = new Set<ApolloCache<any>>();\n  const listeners = new Set<ReactiveListener<T>>();\n\n  const rv: ReactiveVar<T> = function (newValue) {\n    if (arguments.length > 0) {\n      if (value !== newValue) {\n        value = newValue!;\n        // First, invalidate any fields with custom read functions that\n        // consumed this variable, so query results involving those fields\n        // will be recomputed the next time we read them.\n        varDep.dirty(rv);\n        // Next, broadcast changes to any caches that have previously read\n        // from this variable.\n        caches.forEach(broadcast);\n        // Finally, notify any listeners added via rv.onNextChange.\n        consumeAndIterate(listeners, listener => listener(value));\n      }\n    } else {\n      // When reading from the variable, obtain the current cache from\n      // context via cacheSlot. This isn't entirely foolproof, but it's\n      // the same system that powers varDep.\n      const cache = cacheSlot.getValue();\n      if (cache) attach(cache);\n      varDep(rv);\n    }\n\n    return value;\n  };\n\n  rv.onNextChange = listener => {\n    listeners.add(listener);\n    return () => {\n      listeners.delete(listener);\n    };\n  };\n\n  const attach = rv.attachCache = cache => {\n    caches.add(cache);\n    let vars = varsByCache.get(cache)!;\n    if (!vars) varsByCache.set(cache, vars = new Set);\n    vars.add(rv);\n    return rv;\n  };\n\n  rv.forgetCache = cache => {\n    const deleted = caches.delete(cache);\n    if (deleted) {\n      const vars = varsByCache.get(cache);\n      if (vars) vars.delete(rv);\n    }\n    return deleted;\n  };\n\n  return rv;\n}\n\ntype Broadcastable = ApolloCache<any> & {\n  // This method is protected in InMemoryCache, which we are ignoring, but\n  // we still want some semblance of type safety when we call it.\n  broadcastWatches?: InMemoryCache[\"broadcastWatches\"];\n};\n\nfunction broadcast(cache: Broadcastable) {\n  if (cache.broadcastWatches) {\n    cache.broadcastWatches();\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}