{"ast":null,"code":"import { useMemo } from 'react';\n/**\n * Calculate the ratio of two numbers, maximum decimal length can be specified.\n *\n * (0, 100) => 0\n * (50, 100) => 50\n * (11.22, 100) => 11.22\n * (11.22, 100, 4) => 11.2200\n */\n\nexport var getProportions = function getProportions(value, max) {\n  var maxFixed = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 2;\n  var val = value / max;\n  var couldBeDecimalValue = (Number.isNaN(val) ? 0 : val) * 100;\n  if (couldBeDecimalValue > 100) return 100;\n  if (couldBeDecimalValue < 0) return 0;\n  if (!\"\".concat(couldBeDecimalValue).includes('.')) return couldBeDecimalValue;\n  var decimal = \"\".concat(couldBeDecimalValue).split('.')[1];\n  if (decimal.length < maxFixed) return couldBeDecimalValue;\n  return +couldBeDecimalValue.toFixed(maxFixed);\n};\nexport var useProportions = function useProportions(value, max) {\n  var maxFixed = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 2;\n  return useMemo(function () {\n    return getProportions(value, max, maxFixed);\n  }, [value, max, maxFixed]);\n};","map":{"version":3,"sources":["/Users/filippofonseca/Developer/open-source/ranked-lang-colors/core-l/node_modules/@geist-ui/react/esm/utils/calculations.js"],"names":["useMemo","getProportions","value","max","maxFixed","arguments","length","undefined","val","couldBeDecimalValue","Number","isNaN","concat","includes","decimal","split","toFixed","useProportions"],"mappings":"AAAA,SAASA,OAAT,QAAwB,OAAxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,IAAIC,cAAc,GAAG,SAASA,cAAT,CAAwBC,KAAxB,EAA+BC,GAA/B,EAAoC;AAC9D,MAAIC,QAAQ,GAAGC,SAAS,CAACC,MAAV,GAAmB,CAAnB,IAAwBD,SAAS,CAAC,CAAD,CAAT,KAAiBE,SAAzC,GAAqDF,SAAS,CAAC,CAAD,CAA9D,GAAoE,CAAnF;AACA,MAAIG,GAAG,GAAGN,KAAK,GAAGC,GAAlB;AACA,MAAIM,mBAAmB,GAAG,CAACC,MAAM,CAACC,KAAP,CAAaH,GAAb,IAAoB,CAApB,GAAwBA,GAAzB,IAAgC,GAA1D;AACA,MAAIC,mBAAmB,GAAG,GAA1B,EAA+B,OAAO,GAAP;AAC/B,MAAIA,mBAAmB,GAAG,CAA1B,EAA6B,OAAO,CAAP;AAC7B,MAAI,CAAC,GAAGG,MAAH,CAAUH,mBAAV,EAA+BI,QAA/B,CAAwC,GAAxC,CAAL,EAAmD,OAAOJ,mBAAP;AACnD,MAAIK,OAAO,GAAG,GAAGF,MAAH,CAAUH,mBAAV,EAA+BM,KAA/B,CAAqC,GAArC,EAA0C,CAA1C,CAAd;AACA,MAAID,OAAO,CAACR,MAAR,GAAiBF,QAArB,EAA+B,OAAOK,mBAAP;AAC/B,SAAO,CAACA,mBAAmB,CAACO,OAApB,CAA4BZ,QAA5B,CAAR;AACD,CAVM;AAWP,OAAO,IAAIa,cAAc,GAAG,SAASA,cAAT,CAAwBf,KAAxB,EAA+BC,GAA/B,EAAoC;AAC9D,MAAIC,QAAQ,GAAGC,SAAS,CAACC,MAAV,GAAmB,CAAnB,IAAwBD,SAAS,CAAC,CAAD,CAAT,KAAiBE,SAAzC,GAAqDF,SAAS,CAAC,CAAD,CAA9D,GAAoE,CAAnF;AACA,SAAOL,OAAO,CAAC,YAAY;AACzB,WAAOC,cAAc,CAACC,KAAD,EAAQC,GAAR,EAAaC,QAAb,CAArB;AACD,GAFa,EAEX,CAACF,KAAD,EAAQC,GAAR,EAAaC,QAAb,CAFW,CAAd;AAGD,CALM","sourcesContent":["import { useMemo } from 'react';\n/**\n * Calculate the ratio of two numbers, maximum decimal length can be specified.\n *\n * (0, 100) => 0\n * (50, 100) => 50\n * (11.22, 100) => 11.22\n * (11.22, 100, 4) => 11.2200\n */\n\nexport var getProportions = function getProportions(value, max) {\n  var maxFixed = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 2;\n  var val = value / max;\n  var couldBeDecimalValue = (Number.isNaN(val) ? 0 : val) * 100;\n  if (couldBeDecimalValue > 100) return 100;\n  if (couldBeDecimalValue < 0) return 0;\n  if (!\"\".concat(couldBeDecimalValue).includes('.')) return couldBeDecimalValue;\n  var decimal = \"\".concat(couldBeDecimalValue).split('.')[1];\n  if (decimal.length < maxFixed) return couldBeDecimalValue;\n  return +couldBeDecimalValue.toFixed(maxFixed);\n};\nexport var useProportions = function useProportions(value, max) {\n  var maxFixed = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 2;\n  return useMemo(function () {\n    return getProportions(value, max, maxFixed);\n  }, [value, max, maxFixed]);\n};"]},"metadata":{},"sourceType":"module"}